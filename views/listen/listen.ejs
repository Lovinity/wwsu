        <script type="text/paperscript" canvas="visualizer">
            window.AudioContext = window.AudioContext || window.webkitAudioContext;

    var ctx = document.getElementById("visualizer"), // canvas context
            actx = new AudioContext(), // audio context
            cx = ctx.offsetWidth * 0.5, cy = ctx.offsetHeight * 0.5, // center of canvas
            radiusMax = Math.min(cx, cy) - 20, // circle min/max radii
            radiusMin = radiusMax * 0.1,
            analyzer, analyzer2, srcNode, bquad, bquad2, fftLen, fftLen2, fft, fft2, pfft2 = [], ppfft2 = [], pv = 0;     // audio nodes and FFT data		
		
    var vid = document.getElementById("a");

        document.getElementById("playnow").onclick = function() {
	   vid.src = "https://server.wwsu1069.org/shoutcast/stream/1/;";
	   vid.load();
           vid.play();
        }

        document.getElementById("pausenow").onclick = function() {
           vid.pause();
	   vid.src = "";
        }
    
    var path, path2, pathPoints = [];
var radius = (ctx.width / 3);
var prevRadius = 1024;
var points = 128;

		var wwsuColor = "#e61532";
		
		var col1 = "#000000";
		var col2 = wwsuColor;
		
		var col1v = 0;
		var col2v = 1;
		var dest = [1, 1];

        path = new Path({shadowColor: new Color('#330000'),
                        shadowBlur: 12,
                        shadowOffset: new Point(5, 5)});
        path.closed = true;
		path.fillColor = { hue: 352, saturation: 0.91, lightness: 0.4};
path.strokeColor = 'black';
		
		

var raster = new Raster({
    source: '../images/logo_round.png',
    shadowColor: new Color('#222222'),
    shadowBlur: 12,
    shadowOffset: new Point(4, 4),
	position: view.center
});

//raster.scale(radius/prevRadius);

var hitOptions = {
        segments: true,
        stroke: true,
        fill: true,
        tolerance: 5
};

	console.log("stuff");

    vid.oncanplay = function () {
	

        if (srcNode)
            return;
			

        // link audio element and Web Audio API
        srcNode = actx.createMediaElementSource(this);

        // create filter node
        bquad = actx.createBiquadFilter();
        bquad.type = "lowpass";
        bquad.frequency.value = 64;

        bquad2 = actx.createBiquadFilter();
        bquad2.type = "highpass";
        //bquad2.frequency.value = 350;

        // create FFT analyzer node
        analyser = actx.createAnalyser();
        analyser.fftSize = 32;

        analyser2 = actx.createAnalyser();
        analyser2.fftSize = 256;

        // connect nodes: srcNode (input) -> analyzer -> destination (output)
        srcNode.connect(bquad);
        srcNode.connect(bquad2);
        bquad.connect(analyser);
        bquad2.connect(analyser2);

        // connnect source directly to output
        srcNode.connect(actx.destination);

        // create FFT data buffer
        fftLen = analyser.frequencyBinCount;
        fft = new Uint8Array(fftLen);
		
        fftLen2 = analyser2.frequencyBinCount;
        fft2 = new Uint8Array(fftLen2);
		
		points = fftLen2;
		
		for (var i = 0; i < points; i++)
{
    pathPoints.push(new Point({
                        length: (radius * 0.5),
                        angle: ((360 / points) * i) - 90
                }));
}

        for (var i = 0; i < pathPoints.length; i++) {
                var delta = pathPoints[i];
                path.add((view.size/2) + delta);
        }
        path.smooth();

        // start visual galore
        render()
    };

    function render() {

        // fill FFT buffer
        analyser.getByteFrequencyData(fft);
        analyser2.getByteFrequencyData(fft2);

        //console.log(JSON.stringify(fft));

        // average data from some bands
        var v = ((fft[0] * (fft[0] / 256)) + (fft[1] * (fft[1] / 256))) / 512;
		
		if (((v - pv) >= 0.2 || v >= 0.95) && dest[0] === 1 && col1v === 0)
		{
			col1 = '#'+(Math.random()*0xFFFFFF<<0).toString(16);
			dest[0] += 1;
			dest[1] += 1;
			console.log("boom");
		}

		pv = (pv+pv+pv+pv+pv+pv+pv+v)/8;
		
		//var v1 = ((fft[0] * (fft[0] / 256))) / 256;
		//var v2 = ((fft[1] * (fft[1] / 256))) / 256;
		//var v3 = ((fft[2] * (fft[2] / 256))) / 256;
		
		//var vt = (v1 + v2 + v3);
		
		//if (vt > 0)
		//{
		//v1 = v1 / vt;
		//v2 = v2 / vt;
		//v3 = v3 / vt;
		//} else {
		//v1 = 1/3;
		//v2 = 1/3;
		//v3 = 1/3;
		//}

        var scale = 0.5 + (v/2);
        
        radius = (ctx.width / 3) * scale;
        
        radius = (prevRadius+radius)/2;
        
        //console.dir(pathPoints);
        
        // Animate the segments
        for (var i = 0; i < points; i++) {
            
            if (typeof pfft2[i] === 'undefined')
                pfft2[i] = 0;
            if (typeof ppfft2[i] === 'undefined')
                ppfft2[i] = 0;
            
            if (!path || path === null) continue;
            
            var segment = path.segments[i];
            
            if (!segment || segment === null)
                continue;
            
            var value;
            if (i < (points / 2))
            {
                value = fft2[i];
                value = ((value/256) * (1 + (i/(points)))) * ((value/256) * (1 + (i/(points)))) * ((value/256) * (1 + (i/(points)))) * ((value/256) * (1 + (i/(points))));
                value = (value+pfft2[i])/2;
            } else {
                value = fft2[points-(i+1)];
                value = ((value/256) * (1 + ((points-(i+1))/(points)))) * ((value/256) * (1 + ((points-(i+1))/(points)))) * ((value/256) * (1 + ((points-(i+1))/(points)))) * ((value/256) * (1 + ((points-(i+1))/(points))));
                value = (value+pfft2[i])/2;
            }
            
            ppfft2[i] = value;
            
            segment.point.set(new Size(ctx.width / 2, ctx.height / 2) + new Point({length: ((radius / 2) * value) + (radius / 2), angle: ((360 / points) * i) - 90}));
        }
        
        pfft2 = ppfft2;
        
        raster.position = [ctx.width / 2, ctx.height / 2];
        
        raster.scale(radius/prevRadius);
        
        prevRadius = radius;
		
		
		if (dest[0] !== 1 || col1v !== 0)
		{
		   	dest[0] += parseInt(ctx.height / 20);
			dest[1] += parseInt(ctx.height / 20);
		   if (dest[0] > parseInt(ctx.height) && col1v === 0)
		   {
		      dest = [2, 2];
			  col1v = 1;
			  col2v = 0;
		   } else if (dest[0] > parseInt(ctx.height) && col1v === 1)
		   {
		      dest = [1, 1];
			  col1v = 0;
			  col2v = 1;
		   }
		}
        
        path.set({fillColor: {
    gradient: {
        stops: [[col1, col1v], [col2, col2v]],
        radial: true
    },
origin: new Point(ctx.width / 2, ctx.height / 2),
    destination: new Point(ctx.width / 2, ctx.height / 2) + dest
    }});

        //ctx.style.transform = `scale(${scale}, ${scale})`;

        requestAnimationFrame(render)
    }

//window.addEventListener("resize", resizeCanvas, false);
 
function resizeCanvas(e) {
  var myCanvas = document.getElementById("visualizer");
  myCanvas.height = myCanvas.width;
}

        </script>

<div class="row">
    <div class="col">
        <div class="p-1 m-3 card text-white bg-dark">
            <div class="card-header text-center" style="font-size: 1.5em;">Listen to WWSU</div>
            <div class="card-body">
                <p class="card-text" style="text-align: center;">Listen live to WWSU, chat with the DJ, or make song requests here.</p>
                <p class="card-text" style="text-align: center;"><button type="button" class="btn btn-wwsu-red m-1" id="playnow">
                        Play
                </button><button type="button" class="btn btn-secondary m-1" id="pausenow">
                        Stop
                </button></p>
                <div class="card-title" style="text-align: center;"><canvas id="visualizer" style="width: 100%; height: auto;" resize></canvas></div>
                <p class="card-text"><div style="text-align: center; color: #ffffff;" id="nowplaying"><div class="p-3 mb-2 bg-wwsu-red">Connecting...</div></div></p>
                <p class="card-text" style="text-align: center; font-size: 1.5em;">Recent Tracks</p>
                <div class="container" id="recent-tracks"></div>
                <audio id="a" crossOrigin="server.wwsu1069.org" src="https://server.wwsu1069.org/shoutcast/stream/1/;">
                    <p>Your browser does not support HTML5 audio. <a href="https://server.wwsu1069.org/shoutcast/stream/1/;">Click here</a> instead to tune in to WWSU.</p>
                </audio>
            </div>
        </div>
    </div>
</div>