// WORK ON THIS
<!DOCTYPE html>
<html>
    <head>
        <script>if (typeof module === 'object') {
                window.module = module;
                module = undefined;
            }</script> 
<link rel="stylesheet" href="../../../bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../../../bootstrap/css/alertify.min.css">
<link href="../../audio6_html5.css" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i" rel="stylesheet">
<script src="../../js/jquery-3.2.1.min.js"></script>
<script src="../../js/jquery-ui.min.js"></script>
<script src="../../js/popper.js"></script>
<script src="../../bootstrap/js/alertify.min.js"></script>
<script src="../../js/moment.min.js"></script>
<script type="text/javascript" src="../../js/dependencies/sails.io.js"
  environment="production"></script>
<script src="../../bootstrap/js/bootstrap.min.js"></script>
<script type="text/javascript" src="../../js/lastfm.api.md5.js"></script>
<script type="text/javascript" src="../../js/lastfm.api.js"></script>
<script type="text/javascript" src="../../js/lastfm.api.cache.js"></script>
<script type="text/javascript" src="../../js/swfobject.js"></script>
<script src="../../js/jquery.mousewheel.min.js" type="text/javascript"></script>
<script src="../../js/jquery.touchSwipe.min.js" type="text/javascript"></script>
<script src="../../js/audio6_html5.js" type="text/javascript"></script>
<link rel="apple-touch-icon" sizes="57x57" href="../../icons/apple-icon-57x57.png">
<link rel="apple-touch-icon" sizes="60x60" href="../../icons/apple-icon-60x60.png">
<link rel="apple-touch-icon" sizes="72x72" href="../../icons/apple-icon-72x72.png">
<link rel="apple-touch-icon" sizes="76x76" href="../../icons/apple-icon-76x76.png">
<link rel="apple-touch-icon" sizes="114x114" href="../../icons/apple-icon-114x114.png">
<link rel="apple-touch-icon" sizes="120x120" href="../../icons/apple-icon-120x120.png">
<link rel="apple-touch-icon" sizes="144x144" href="../../icons/apple-icon-144x144.png">
<link rel="apple-touch-icon" sizes="152x152" href="../../icons/apple-icon-152x152.png">
<link rel="apple-touch-icon" sizes="180x180" href="../../icons/apple-icon-180x180.png">
<link rel="icon" type="image/png" sizes="192x192"  href="../../icons/android-icon-192x192.png">
<link rel="icon" type="image/png" sizes="32x32" href="../../icons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="96x96" href="../../icons/favicon-96x96.png">
<link rel="icon" type="image/png" sizes="16x16" href="../../icons/favicon-16x16.png">
<link rel="manifest" href="../../icons/manifest.json">
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
<meta name="theme-color" content="#ffffff">
<script>
jQuery(function() {
		jQuery("#lbg_audio6_html5_shoutcast_1").audio6_html5({
			radio_stream:"http://server.wwsu1069.org/stream",
			radio_name:"WWSU 106.9FM",
			playerWidth:355,
			imageHeight:355,
			skin:"whiteControllers",
			responsive:true,
			grabLastFmPhoto:true,
			autoPlay:true,
			songTitleColor:"#ffffff",
			authorTitleColor:"#F5F5F5",
			lineSeparatorColor:"#616161",
			radioStationColor:"#C8E6C9",
			frameBehindTextColor:"#000000",
			frameBehindButtonsColor:"#454545",
			sticky:false,
			startMinified:false,
			showOnlyPlayButton:false,
			centerPlayer:true,
			playerBorderSize:0,
			playerBorderColor:"#000000",
			showFacebookBut:false,
			facebookAppID:"",
			facebookShareTitle:"HTML5 Radio Player With History - Shoutcast and Icecast",
			facebookShareDescription:"A top-notch responsive HTML5 Radio Player compatible with all major browsers and mobile devices.",
			showTwitterBut:false,
			showVolume:true,
			showRadioStation:true,
			showTitle:true,
			showHistoryBut:true,
			showHistory:true,
			showHistoryOnInit:true,
			translateReadingData:"reading data...",
			historyTranslate:"HISTORY - latest played songs",
			historyTitleColor:"#858585",
			historyBgColor:"#ebebeb",
			historyRecordBgColor:"transparent",
			historyRecordBottomBorderColor:"transparent",
			historyRecordSongColor:"#000000",
			historyRecordSongBottomBorderColor:"#d0d0d0",
			historyRecordAuthorColor:"#6d6d6d",
			numberOfThumbsPerScreen:3,
			historyPadding:16,
			historyRecordTitleLimit:28,
			historyRecordAuthorLimit:36,
			nowPlayingInterval:15,
			noImageAvailable:"noimageavailable.jpg"
		});
	});
</script>

        <meta charset="UTF-8">
<title>WWSU Listener's Corner</title>
<meta name="Description" content="Tune in live to WWSU Radio and see what's currently playing. Chat with the DJ in our web chat box. And make track requests.">
        <style>
            body
            {
                overflow-x: hidden;
            }
        </style>
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
    </head>
    <body style="background-color: #37474F; min-width: 410px;">
<div class="container">
  <div class="row">
<div class="col align-self-center">
<div class="card" style="background-color: #455A64; color: #ffffff;">
    <a href="https://wwsu1069.org">"<img class="card-img-top" src="../../images/logo.png" alt="WWSU Logo"></a>
    <div class="card-body">
      <h4 class="card-title">WWSU Listener's Corner</h4>
      <p class="card-text">Listen live to WWSU, chat with the DJ, or make song requests here.</p>
    </div>
  </div>
</div>
</div>
  <div class="row">
    <div class="col">
<div class="card" style="background-color: #455A64; color: #ffffff; min-width: 410px;">
  <div class="card-header text-center">Listen Live</div>
  <div class="card-body">
             <div class="audio6_html5">
             	<audio id="lbg_audio6_html5_shoutcast_1" preload="metadata">
                No HTML5 audio playback capabilities for this browser. Use <a href="https://www.google.com/intl/en/chrome/browser/">Chrome Browser!</a>
                </audio>
             </div>
             <br style="clear:both;">
        <p class="card-text"><div style="text-align: center; color: #ffffff;" id="nowplaying"><div class="p-3 mb-2 border border-warning">Connecting to WWSU...</div></div></p>
  </div>
</div>
    </div>
</div>
  <div class="row">
    <div class="col">
<div class="card" style="background-color: #455A64; color: #ffffff;">
  <div class="card-header text-center">Chat with the DJ</div>
  <div class="card-body">
        <div class="container-fluid" id="messages" style="height: 360px; overflow-y: auto; background-color: #546E7A; color: #FFFFFF;">
        </div>
        <div class="form-group">
            <textarea class="form-control" rows="2" id="themessage" placeholder="Type your message here. You are limited to sending one message per minute."></textarea>
        </div>
        <div class="form-group">
    <input type="text" class="form-control" id="nickname" maxlength="32" placeholder="Nickname (optional)">
            <a type="button" class="btn btn-success" id="sendmessage" href="javascript:sendMessage(false)">
                Send (public)
            </a>
            <a type="button" class="btn btn-primary" id="sendmessagep" href="javascript:sendMessage(true)">
                Send (private)
            </a>
            <a type="button" class="btn btn-danger" id="clearchat" href="javascript:clearChat()">
                Clear Chat
            </a>
        </div>
<p style="color: #ffffff">Sending a public message is viewable by the DJ and other web visitors. Sending a private message is only viewable by the DJ.</p>
        <p style="color: #ffffff"><strong>By submitting messages, you agree not to abuse the chat system (and that your IP is logged).</strong> WWSU and the on-air DJ have the right to delete messages or ban users, temporarily or indefinitely, for any reason, with or without explanation.</p>
  </div>
</div>
    </div>
</div>
  <div class="row">
    <div class="col">
<div class="card" style="background-color: #455A64; color: #ffffff; min-width: 410px;">
  <div class="card-header text-center">Request a Song</div>
  <div class="card-body">
<div class="container-fluid" id="trackrequests" style="height: 480px; overflow-y: auto; background-color: #546E7A; color: #000000;">
<form name="input" action="javascript:loadTracks(null)" method="get"><div class="col-sm-6"><div class="input-group"><input type="text" placeholder="Search artist or title..." value="" id="searchterm" class="form-control"><span class="input-group-btn"><input type="submit" class="btn btn-default" type="button" value="Search">Search</span><br /></div></div></form>
<table border="1" class="table table-hover" cellpadding="1" cellspacing="1" style="width: 100%;" id="results-table"> <tr>
<thead class="thead-dark">
<th scope="col">Artist - Title</th>
<th scope="col">Info/Request</th>
</thread> </tr>
</table>
        </div>
<p>You may request up to 10 tracks per day. Requests during automation are played after the break at :00, :20, and :40 past the hour (up to 3 requests are played per break in the order in which they are received). Requests during shows are up to the DJ's discretion.</p>
  </div>
</div>
    </div>
</div>
</div>

<!-- Modal -->
        <div class="modal fade" id="trackModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel2" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel2">Track Information</h5>
                        <a type="button" class="close" data-dismiss="trackModal" href="javascript:closeModal()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </a>
                    </div>
                    <div class="modal-body" id="track-info-body">
                        Please wait...
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>

    </body>
    <script>if (window.module)
                module = window.module;</script>
    <script>
//var checkmessages = setInterval(doMessages, 10000);
var nowPlaying = document.getElementById('nowplaying');
var notificationsBox = document.getElementById('messages');
var messageText = document.getElementById('themessage');
var nickname = document.getElementById('nickname');
var sendButton = document.getElementById('sendmessage');
var idoffset = 0;
var automationpost = null;
var metadata = {display: {line1: '', line2: ''}};
var shouldScroll = false;
var theopts = {};
var blocked = false;

function escapeHTML(str) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}

function closeModal() {
$('#trackModal').modal('hide');
}

io.socket.on('connect', function () {
   notificationsBox.innerHTML += `<div class="p-3 mb-2 border border-success" style="background: rgba(76, 175, 80, 1);><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span> You are now connected to WWSU.</div>`;
   alertify.success('You are now connected to WWSU.');
   doSockets();
});

io.socket.on('disconnect', function () {
    console.log('Lost connection');
    nowPlaying.innerHTML = `<div class="p-3 mb-2 border border-danger">Lost connection to WWSU. Attempting to re-connect...</div>`;
    notificationsBox.innerHTML += `<div class="p-3 mb-2 bg-warning" style="color: #000000;"><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span>Lost connection to WWSU. The chat system will be unavailable until connection is re-established. Please wait while trying to reconnect...</div>`;
    alertify.error('Lost connection with WWSU. Attempting to reconnect...');
});

io.socket.on('statemeta', function (event) {
    if (event.verb === 'messaged')
    {
        doMeta(event.data);
    }
});

io.socket.on('webmessage', function (data) {
   //console.log(data);
   processmessage(data);
});

io.socket.on('message-remove', function (data) {
        var temp = document.getElementById(`msg-${data.id}`)
        if (temp !== null)
            temp.innerHTML = 'XXX This message was deleted XXX';
});

function doSockets()
{
    io.socket.post('/messages/readWebMessages', {offset: idoffset, nickname: nickname.value}, function serverResponded(body, JWR) {
        //console.log(body);
        try {
            processmessage(JSON.parse(body));
        } catch (e) {
            //console.error(e);
            setTimeout(doSockets, 10000);
        }
    });

    io.socket.post('/statemeta/getmeta', {}, function serverResponded(body, JWR) {
        //console.log(body);
        try {
            doMeta(JSON.parse(body));
        } catch (e) {
            //console.error(e);
            setTimeout(doSockets, 10000);
        }
    });
}

function processmessage(response)
{
            try {
                shouldScroll = notificationsBox.scrollTop + notificationsBox.clientHeight === notificationsBox.scrollHeight;
                if (typeof response.status != 'undefined')
                {
                    var status = response.status;
                    if (status == 'denied')
                    {
                        if (!blocked)
                            alertify.error(response.response);
                        blocked = true;
                        messageText.disabled = true;
                        sendButton.disabled = true;
                        notificationsBox.innerHTML = `<div class="p-3 mb-2 bg-danger">${response.response}</div>`;
                        if (shouldScroll) {
                            $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                        }
                        return null;
                    }
                }
                response.response.forEach(function (notification) {
                    if (notification.ID > idoffset)
                        idoffset = notification.ID;
                    if (notification.for.startsWith("website-"))
                    {
                            notificationsBox.innerHTML += `<div id="msg-${notification.ID}" class="p-3 mb-2 border border-warning" style="background: rgba(255, 193, 7, 0.5);"><span class="badge badge-primary" style="font-size: 1em;">${moment(notification.createdAt).format('LTS')}</span> <span class="badge badge-secondary" style="font-size: 1em;">#${notification.ID}</span> <span class="badge badge-danger" style="font-size: 1em;">${notification.from_friendly}</span> <span class="badge badge-success" style="font-size: 1em;">Private with ${notification.for_friendly}</span><br />${notification.message}</div>`
                                alertify.warning(`Private Message from DJ: ${notification.message}`);
                    } else if (notification.for == 'website')
                    {
                            notificationsBox.innerHTML += `<div id="msg-${notification.ID}" class="p-3 mb-2 border border-warning" style="background: rgba(255, 193, 7, 0.5);"><span class="badge badge-primary" style="font-size: 1em;">${moment(notification.createdAt).format('LTS')}</span> <span class="badge badge-secondary" style="font-size: 1em;">#${notification.ID}</span> <span class="badge badge-danger" style="font-size: 1em;">From: ${notification.from_friendly}</span><br />${notification.message}</div>`
                                alertify.success(`Message from DJ: ${notification.message}`);
                    } else if (notification.for == 'DJ-private') {
                            notificationsBox.innerHTML += `<div id="msg-${notification.ID}" class="p-3 mb-2 border border-secondary" style="background: rgba(96, 125, 139, 0.3);"><span class="badge badge-primary" style="font-size: 1em;">${moment(notification.createdAt).format('LTS')}</span> <span class="badge badge-secondary" style="font-size: 1em;">#${notification.ID}</span> <span class="badge badge-danger" style="font-size: 1em;">From: ${notification.from_friendly}</span> <span class="badge badge-success" style="font-size: 1em;">Private with DJ</span><br />${notification.message}</div>`
                    } else {
                            notificationsBox.innerHTML += `<div id="msg-${notification.ID}" class="p-3 mb-2 border border-secondary" style="background: rgba(96, 125, 139, 0.3);"><span class="badge badge-primary" style="font-size: 1em;">${moment(notification.createdAt).format('LTS')}</span> <span class="badge badge-secondary" style="font-size: 1em;">#${notification.ID}</span> <span class="badge badge-danger" style="font-size: 1em;">From: ${notification.from_friendly}</span><br />${notification.message}</div>`
                    }
                });
            } catch (e) {
                console.error(e);
            }
}

function doMeta(response)
{
                try {
                shouldScroll = notificationsBox.scrollTop + notificationsBox.clientHeight === notificationsBox.scrollHeight;
                metadata = deepmerge(metadata, response);
                    if ('display' in response && ('line1' in response.display || 'line2' in response.display))
                    {
                        if (metadata.state.includes("live_"))
                            nowPlaying.innerHTML = `<div class="p-3 mb-2 bg-danger">${metadata.display.line1}<br />${metadata.display.line2}<br />${(metadata.topic.length > 2 ? `Topic: ${metadata.topic}` : '')}</div>`;
                        if (metadata.state.includes("sports_") || metadata.state.includes("sportsremote_"))
                            nowPlaying.innerHTML = `<div class="p-3 mb-2 bg-success">${metadata.display.line1}<br />${metadata.display.line2}</div>`;
                        if (metadata.state.includes("remote_"))
                            nowPlaying.innerHTML = `<div class="p-3 mb-2 bg-primary" style="background-color: #673AB7">${metadata.display.line1}<br />${metadata.display.line2}</div>`;
                        if (metadata.state.includes("automation_") || metadata.state == 'unknown')
                            nowPlaying.innerHTML = `<div class="p-3 mb-2 bg-primary">${metadata.display.line1}<br />${metadata.display.line2}</div>`;
                    }
                if ('webchat' in response && !response.webchat)
                {
                        blocked = true;
                        messageText.disabled = true;
                        sendButton.disabled = true;
                        notificationsBox.innerHTML = `<div class="p-3 mb-2 border border-danger" style="background: rgba(244, 67, 54, 0.5);">The DJ currently on the air has disabled the chat system for their show. You will not be able to send any messages until the DJ finishes their show.</div>`;
                        //notificationsBox.innerHTML = `<div class="p-3 mb-2 border border-danger" style="background: rgba(244, 67, 54, 0.5);">The web chat has been disabled until further notice. We apologize for the inconvenience.</div>`;
                        if (shouldScroll) {
                            $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                        }
                    return null;
                }
                if ('state' in response)
                {
                    if (response.state.includes("automation_") || metadata.state == 'unknown')
                    {
                        if (automationpost != 'automation')
                        {
                            notificationsBox.innerHTML += `<div class="p-3 mb-2 border border-primary" style="background: rgba(33, 150, 243, 1);"><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span> Currently, there are no DJs live on the air. There might not be anyone in the studio at this time to view your messages.</div>`;
                            if (shouldScroll) {
                                 $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                            }
                        automationpost = 'automation';
                        }
                    } else if (response.state == 'live_prerecord'){
                     if (automationpost != response.live)
                     {
                            notificationsBox.innerHTML += `<div class="p-3 mb-2 border border-primary" style="background: rgba(33, 150, 243, 1);"><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span> A pre-recorded show is now airing. There might not actually be anyone in the studio right now to view your messages.</div>`;
                        automationpost = response.live;
                        if (shouldScroll) {
                            $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                        }
                     }
                    } else {
                    if (automationpost != response.live)
                    {
                        notificationsBox.innerHTML += `<div class="p-3 mb-2 border border-success" style="background: rgba(76, 175, 80, 1);><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span> A DJ/show is now live on the air (${response.live}). Your messages should be received by the DJ.</div>`;
                        automationpost = response.live;
                        if (shouldScroll) {
                            $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                        }
                    }
                    }
                }
                blocked = false;
                messageText.disabled = false;
                sendButton.disabled = false;
            } catch (e) {
                console.error(e);
            }
}

function sendMessage(private) {
if (blocked) return null;
    io.socket.post('/messages/sendWebMessage', {message: messageText.value, nickname: nickname.value, private: private}, function serverResponded(response, JWR) {
        //console.log(body);
        try {
                response = JSON.parse(response);
                if (typeof response.status != 'undefined')
                {
                    var status = response.status;
                    if (status != 'success')
                    {
                        notificationsBox.innerHTML += `<div class="p-3 mb-2 bg-warning" style="color: #000000;"><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span>There was an error submitting your message: ${response.response}</div>`;
                        $("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
                        return null;
                    }
                }
messageText.value = '';
//$("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
} catch (e) {
      notificationsBox.innerHTML += `<div class="p-3 mb-2 bg-warning" style="color: #000000;"><span class="badge badge-primary" style="font-size: 1em;">${moment().format('LTS')}</span>There was an error submitting your message. Either there was a network issue, or you sent a message too quickly (website visitors are limited to one message per minute). If this problem continues, email engineer@wwsu1069.org .</div>`;
$("#messages").animate({ scrollTop: $("#messages").prop('scrollHeight')}, 1000);
}
});
}

function clearChat()
{
    notificationsBox.innerHTML = '';
}

function loadTrackInfo(trackID) {
$('#trackModal').modal('show');
var modalBody = document.getElementById('track-info-body');
modalBody.innerHTML = 'Loading track information...';
$('#trackModal').modal('handleUpdate');
$.ajax('/requests/gettrack?id=' + trackID, {})
.then(
    function success(resHTML) {
        modalBody.innerHTML = resHTML;
        $('#trackModal').modal('handleUpdate');
    },

    function fail(data, status) {
        modalBody.innerHTML = 'Failed to load track information.';
    }
);
}

function requestTrack(trackID) {
var modalBody = document.getElementById('track-info-body');
var requestName = document.getElementById('request-name');
var requestMessage = document.getElementById('request-message');
var data = {ID: trackID, name: requestName.value, message: requestMessage.value};
modalBody.innerHTML = 'Requesting track...';
$('#trackModal').modal('handleUpdate');
$.ajax({
  type: "POST",
  url: '/requests/requesttrack',
  data: data
})
.then(
    function success(resHTML) {
        modalBody.innerHTML = resHTML;
        $('#trackModal').modal('handleUpdate');
    },

    function fail(data, status) {
        modalBody.innerHTML = 'Failed to make track request.';
    }
);
}

function loadTracks(opts) {
var tableData = document.getElementById('results-table');
if (opts === null)
{
    var search = document.getElementById('searchterm');
    opts = {search: escapeHTML(search.value)};
}
if (typeof opts.skip == 'undefined' || opts.skip == 0)
{
   scrollIndex = 0;
   opts.skip = 0;
    for(var i = tableData.rows.length; i > 1;i--)
        {
        tableData.deleteRow(i -1);
        }
} else {
    scrollIndex = opts.skip;
}
$.ajax('/requests/gettracks', {
    data: opts,
})
.then(
    function success(tracks) {
        JSON.parse(tracks).forEach(function(track) {
            var newRow = tableData.insertRow(tableData.rows.length);
            newRow.classList.add(`table-${track.trClass}`);
            var cell2 = newRow.insertCell(0);
            cell2.innerHTML = `<a href="javascript:loadTracks({search: \`${escapeHTML(track.artist)}\`})">${track.artist}</a> - <a href="javascript:loadTracks({search: \`${escapeHTML(track.title)}\`})">${track.title}</a>`;
            var cell5 = newRow.insertCell(1);
            cell5.innerHTML = `<a href="javascript:loadTrackInfo(${track.ID})" title="Get Track Info" role="button" class="btn btn-${track.trClass}">Click here</a>`;
        });
    },

    function fail(data, status) {
        alert('Request failed.  Returned status of ' + status);
    }
);
theopts = opts;
}
loadTracks({skip: 0});

$('#trackrequests').bind('scroll', function(){
   if($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight){
        theopts.skip = theopts.skip + 25;
        loadTracks(theopts);
   }
});

/* Deepmerge - Start */
function isMergeableObject(val) {
    var nonNullObject = val && typeof val === 'object'

    return nonNullObject
        && Object.prototype.toString.call(val) !== '[object RegExp]'
        && Object.prototype.toString.call(val) !== '[object Date]'
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice()
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument)
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument)
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument))
        }
    })
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {}
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument)
        })
    }
    Object.keys(source).forEach(function (key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument)
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument)
        }
    })
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge }
    var arrayMerge = options.arrayMerge || defaultArrayMerge

    if (array) {
        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
}
/* Deepmerge - Ends */

    </script>
</html>

